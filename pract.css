/* this is combinator */
div>p{
    color: green;

}
h3{
    color: red;

}
#nbtn{
  color: black;
  background-color: white;
  border: 1px solid black;

}
#obtn{
  background-color: red;
  color: white;
  border: 1.5px solid black;
}
input[type="text"]{
    background-color: tomato;
    border: 1px solid black;
    color: rgb(226, 58, 58);
}
input[type="password"]{
    background-color: tomato;
    border: 1px solid black;

    color: rgb(247, 136, 136);
}
nav ul li a{
    color: red;
}
.containor h3 {
    color: rgb(120, 120, 251);
}
.containor h3 a{
    background-color: yellow;
    color: black;
}
#btn{
    background-color: green;
    color: black;
    border: 1.5px solid black;
    box-shadow: 19px;

}
#bbtn{
    background-color: rgb(87, 87, 169);
    border: 1px solid black;
    color: black;
}
.containor p{
    color: red;
    text-decoration: teal double underline;

}
/* now we have to practice aboput the pseodu classses  */
button:hover{
    background-color: black;
    color: white;
}

 h3 button:hover{ /* when we mouse ove that will change */
    background-color: black;
    color: white;
}
.containor button:active{ /* when we click on that that will change */
    background-color: rgb(25, 17, 94);
    color: rgb(18, 18, 17);
}
/* two button at the start are not changing from hover or active 
because their is a specifically theory behinf that 
like when we are give that button property by their classes or id then they not going to change
 */
 input[type=radio]:checked + label{
    color: red;
    font-weight:900 ;
 }
 /* now we have to practice aboput the pseodu classses  */
 main:nth-of-type(3n){
    background-color: aqua;

 }
 /* talk about the specifically
 that what we are using when we giving the properties
 id>class>element
 according to this scores properties changed */
 h3{
    background-color: rgb(64, 84, 78);
 }
  
 .section{
    font-family: 'Courier New';
 }
 h2{
    color: blue;
    font-size: xx-large;
    font-family: 'Courier New', Courier, monospace;


 }
 #section button{
    background-color: aqua;
    border: 2px solid black;
    padding: 0px 5px;

 }
 #section #search{
    background-color: black;
    color: white;

 }
/* ////css of the inheritance file: */
.sect{
    background-image: linear-gradient(to right top, #9f8493, #987390, #8d6391, #7b5594, #604a99, #4f52a2, #3759aa, #0060b0, #0074b2, #008095, #008766, #388934);
    width: 50%;
    margin: auto;
    border-radius: 10%;
    box-shadow: 200px;
    box-decoration-break: slice;


}

/* first he inerit the property of his parents
but when we give him his he will apply that */
 .sect p{
    background-color:url("https://colorhunt.co/palette/ff204ea0153e5d0e4100224d");
    font-size: 24px;

 }
 /* then he override the property of his parent */
/* but not all the elements do the same thing.
like button or input does not inherit prop stright away.containor */
/* now when we write the inherit then i will aplly tot these elements */
.sect button{
    background-color: inherit;
}
.sect input{
    background-color: inherit;
}
#inline{
    background-color: yellow;
    color: black;
}

/* css of inline vs block level
 also we can make any block level into inline just giving inline property */
#inline p{
    display: inline-block;
    position: relative;
    width: 50%;
    margin: auto;
    border: 2px dotted firebrick;
    padding: 20px;
    
    height: 200px;
    margin-top: 10rem;
}
#myCanvas{
   color: #0060b0;
   position: absolute;
   top: 140px;
   left: 38rem;


}
/* //we can
 make any inline element into block level by just givinh property */
#inline span{
    display: block;
}
 /* now margin and padding properties not completely applied into inline  */
 #inline span{
    display: inline;
    margin: 20px;
    border: 2px solid darkblue;
 }










